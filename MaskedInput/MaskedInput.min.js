this.smartmed=this.smartmed||{},this.smartmed.MaskedInput=function(t,e){"use strict";var s=t.defineComponent({name:"MaskedInput",props:{modelValue:{type:[String,Number,Object,null],required:!0},maskOptions:{type:[Object,null],default:null},disabled:Boolean,stringify:{type:Function,default:t=>t}},mounted(){this.maskOptions&&this.initMask()},data:()=>({textMaskInputElement:null}),methods:{initMask(){t.nextTick((()=>{this.setTextMaskInputElement(),this.textMaskInputElement.update(this.modelValue)}))},createTextMaskInputElement:e.createTextMaskInputElement,setTextMaskInputElement(){this.textMaskInputElement=this.createTextMaskInputElement({inputElement:this.$refs.native,mask:this.maskOptions.mask,value:this.modelValue,showMask:!1,guide:this.maskOptions.guide||!1,pipe:this.maskOptions.pipe||(t=>t)})},updateValue(t){this.disabled||(this.maskOptions&&this.textMaskInputElement.update(t),this.$emit("update:modelValue",this.$refs.native.value))},bind(){this.setTextMaskInputElement(),this.updateValue(this.modelValue)}},watch:{maskOptions(t,e){this.maskOptions!==e&&this.bind()}}});const a=["value","disabled"];return s.render=function(e,s,n,i,u,l){return t.openBlock(),t.createElementBlock("input",t.mergeProps({ref:"native"},e.$attrs,{value:e.stringify(e.modelValue),disabled:e.disabled,onInput:s[0]||(s[0]=t=>e.updateValue(t.target.value))}),null,16,a)},s}(Vue,textMaskCore);
