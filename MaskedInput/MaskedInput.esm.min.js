import{defineComponent as t,nextTick as e,openBlock as s,createElementBlock as a,mergeProps as i}from"vue";import{createTextMaskInputElement as n}from"text-mask-core";var u=t({name:"MaskedInput",props:{modelValue:{type:[String,Number,Object,null],required:!0},maskOptions:{type:[Object,null],default:null},disabled:Boolean,stringify:{type:Function,default:t=>t}},mounted(){this.maskOptions&&this.initMask()},data:()=>({textMaskInputElement:null}),methods:{initMask(){e((()=>{this.setTextMaskInputElement(),this.textMaskInputElement.update(this.modelValue)}))},createTextMaskInputElement:n,setTextMaskInputElement(){this.textMaskInputElement=this.createTextMaskInputElement({inputElement:this.$refs.native,mask:this.maskOptions.mask,value:this.modelValue,showMask:!1,guide:this.maskOptions.guide||!1,pipe:this.maskOptions.pipe||(t=>t)})},updateValue(t){this.disabled||(this.maskOptions&&this.textMaskInputElement.update(t),this.$emit("update:modelValue",this.$refs.native.value))},bind(){this.setTextMaskInputElement(),this.updateValue(this.modelValue)}},watch:{maskOptions(t,e){this.maskOptions!==e&&this.bind()}}});const l=["value","disabled"];u.render=function(t,e,n,u,p,m){return s(),a("input",i({ref:"native"},t.$attrs,{value:t.stringify(t.modelValue),disabled:t.disabled,onInput:e[0]||(e[0]=e=>t.updateValue(e.target.value))}),null,16,l)};export{u as default};
